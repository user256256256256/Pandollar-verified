@using DevExtreme.AspNet.Mvc
@using PANDOLLAR.Areas.CoreSystem.Models

@{
    Layout = "_Layout";
    ViewData["Title"] = "System Migrations";
}

<!-- Section Title Card -->
<div class="card col-12 card-title">
    <center><span><i data-feather="arrow-right-circle"></i> SYSTEM MIGRATIONS</span></center>
</div>

<!-- Section Search for the Company-->
<div class="row">
    <div class="form-group col-md-4">
        <label class="my-3">Company Name:</label>
        @(Html.DevExtreme().SelectBox()
            .DataSource(d => d.Mvc().Controller("CompaniesAPI").LoadAction("Get").Key("CompanyId"))
            .DisplayExpr("CompanyName")
            .ValueExpr("CompanyId")
            .SearchEnabled(true)
            .ShowClearButton(true)
            .Placeholder("Select Company")
            .Width("100%")
            .ID("txt_company")
            .OnValueChanged(@<text>
            function(e){
            // Refresh the grid when the company is changed
            const grid = $('#gv_migrationList').dxDataGrid('instance');
            grid.refresh();  // Triggers a reload with the updated parameters
            }
        </text>))
    </div>
</div>

<!-- DevExtreme DataGrid for System Migrations -->
<div id="migrationGrid">
    @(
        Html.DevExtreme().DataGrid<DataMigration>()
        .ShowBorders(true)
        .ID("gv_migrationList")
        .DataSource(d => d.Mvc().Controller("DataMigrationsAPI").LoadAction("Get").Key("MigrationId")
        .LoadParams(new { CompanyId = new JS("getCompanyId") }))
        .ShowColumnLines(false)
        .ShowRowLines(true)
        .RowAlternationEnabled(true)
        .ColumnHidingEnabled(true)
        .ColumnAutoWidth(true)
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .FocusedRowEnabled(true)
        .Paging(p => p.PageSize(10))
        .RemoteOperations(true)
        .Summary(s => s.TotalItems(totalItems => { totalItems.AddFor(m => m.MigrationId).SummaryType(SummaryType.Count); }))
        .Editing(e => e
        .AllowAdding(false)  // Disable adding new migrations
        .AllowUpdating(false)  // Allow updating migrations'
        .AllowDeleting(true)  // Allow deleting migrations
        .UseIcons(true) // Use Icons
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("System Migration")
        .Height(450)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        )
        .Columns(columns =>
        {
            // Add column for Companies
            columns.AddFor(m => m.Company.CompanyName).Caption("Company Name").Visible(true).AllowEditing(false);

            columns.AddFor(m => m.MigrationId).Visible(false).AllowEditing(false);  // Hide MigrationId
            columns.AddFor(m => m.SourceSystem).Caption("Source System").AllowEditing(false);
            columns.AddFor(m => m.DestinationSystem).Caption("Destination System").AllowEditing(false);
            columns.AddFor(m => m.Status).Caption("Status").AllowEditing(true); // Allow editing Status
            columns.AddFor(m => m.StartDate).Caption("Start Date").DataType(GridColumnDataType.Date).Format("MM/dd/yyyy").AllowEditing(false);
            columns.AddFor(m => m.EndDate).Caption("End Date").DataType(GridColumnDataType.Date).Format("MM/dd/yyyy").AllowEditing(false);
            columns.AddFor(m => m.RecordsMigrated).Caption("Records Migrated").AllowEditing(false);
            columns.AddFor(m => m.ErrorCount).Caption("Error Count").AllowEditing(false);
            columns.AddFor(m => m.Log).Caption("Log").Visible(true);
            columns.AddFor(m => m.MappingRules).Caption("Mapping Rules").AllowEditing(false); // Assuming MappingRules is read-only

            // Add columns for Companies
            columns.AddFor(m => m.Company.CompanyEmail).Caption("Company Email").Visible(true).AllowEditing(false);
            columns.AddFor(m => m.Company.CompanyPhone).Caption("Company Phone").Visible(true).AllowEditing(false);

            // Manage Button Column (for Edit/Delete)
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(80)
            .Caption("Manage")
            .Name("ManageButton")
            .Buttons(b =>
            {
                // b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
            });

        })
        )
</div>

<script>
    // Handling row change for the client grid
    function onMainRowChanged(e) {
        const rowData = e.row && e.row.data;
        // You can add your custom logic here to handle row change
    }

    // Get the selected company ID
    function getCompanyId() {
        var companyId = $("#txt_company").dxSelectBox('option', 'value');
        return companyId;
    }
</script>
